#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ブループリント分析 Phase 3: 軽量異常検知機能
パフォーマンス重視の実用的な異常検知システム
"""

from typing import Dict, List, Any, Optional, Tuple
import pandas as pd
import numpy as np
import logging
from datetime import datetime, timedelta
from collections import defaultdict
from dataclasses import dataclass

# shift_suite の定数を使用
try:
    from .constants import SLOT_HOURS
except ImportError:
    SLOT_HOURS = 0.5

log = logging.getLogger(__name__)

@dataclass
class AnomalyResult:
    """異常検知結果を格納するデータクラス"""
    anomaly_type: str
    severity: str  # "低", "中", "高", "緊急"
    staff: str
    description: str
    value: float
    expected_range: Tuple[float, float]
    date_range: Optional[Tuple[str, str]] = None
    
class LightweightAnomalyDetector:
    """
    軽量異常検知システム
    Phase 3: 実用性とパフォーマンスを重視した設計
    """
    
    def __init__(self, sensitivity: str = "medium"):
        """
        初期化
        
        Args:
            sensitivity: 検知感度 ("low", "medium", "high")
        """
        self.sensitivity = sensitivity
        self.thresholds = self._get_thresholds(sensitivity)
        log.info(f"[AnomalyDetector] 軽量異常検知システム初期化完了 (感度: {sensitivity})")
    
    def _get_thresholds(self, sensitivity: str) -> Dict[str, float]:
        """感度に基づく閾値設定"""
        base_thresholds = {
            "excessive_hours_multiplier": 1.5,  # 通常の1.5倍以上の労働時間
            "continuous_work_days": 7,          # 連続勤務日数の上限
            "night_shift_frequency": 0.4,       # 夜勤頻度の上限（40%）
            "interval_violation_hours": 11,     # 勤務間インターバル違反（11時間未満）
            "outlier_std_multiplier": 2.0       # 外れ値検知（平均±2σ）
        }
        
        # 感度による調整
        if sensitivity == "high":
            for key in base_thresholds:
                if "multiplier" in key:
                    base_thresholds[key] *= 0.8  # より厳しく
                elif key == "continuous_work_days":
                    base_thresholds[key] = 5    # より厳しく
        elif sensitivity == "low":
            for key in base_thresholds:
                if "multiplier" in key:
                    base_thresholds[key] *= 1.2  # より緩く
                elif key == "continuous_work_days":
                    base_thresholds[key] = 10   # より緩く
        
        return base_thresholds
    
    def detect_anomalies(self, long_df: pd.DataFrame) -> List[AnomalyResult]:
        """
        軽量異常検知のメイン処理
        
        Args:
            long_df: 長形式シフトデータ
            
        Returns:
            検知された異常のリスト
        """
        log.info("[AnomalyDetector] 異常検知開始")
        
        if long_df.empty:
            log.warning("[AnomalyDetector] 入力データが空です")
            return []
        
        # データの前処理
        work_records = long_df[long_df['parsed_slots_count'] > 0].copy()
        if work_records.empty:
            log.warning("[AnomalyDetector] 有効な勤務レコードがありません")
            return []
        
        anomalies = []
        
        try:
            # 1. 労働時間異常の検知（最優先・軽量）
            log.info("[AnomalyDetector] 労働時間異常検知開始")
            anomalies.extend(self._detect_excessive_hours(work_records))
            
            # 2. 連続勤務異常の検知（法令遵守）
            log.info("[AnomalyDetector] 連続勤務異常検知開始")
            anomalies.extend(self._detect_continuous_work_violations(work_records))
            
            # 3. 夜勤頻度異常の検知（健康管理）
            log.info("[AnomalyDetector] 夜勤頻度異常検知開始")
            anomalies.extend(self._detect_night_shift_anomalies(work_records))
            
            # 4. 勤務間インターバル違反（軽量版）
            log.info("[AnomalyDetector] 勤務間インターバル違反検知開始")
            anomalies.extend(self._detect_interval_violations(work_records))
            
        except Exception as e:
            log.error(f"[AnomalyDetector] 異常検知中にエラー: {e}")
            raise
        
        log.info(f"[AnomalyDetector] 異常検知完了: {len(anomalies)}件の異常を検知")
        return sorted(anomalies, key=lambda x: self._get_severity_priority(x.severity))
    
    def _detect_excessive_hours(self, work_df: pd.DataFrame) -> List[AnomalyResult]:
        """過度な労働時間の検知（O(n)）"""
        anomalies = []
        
        # 個人別の月間労働時間を計算
        work_df['year_month'] = work_df['ds'].dt.to_period('M')
        monthly_hours = work_df.groupby(['staff', 'year_month'])['parsed_slots_count'].sum() * SLOT_HOURS
        
        # 全体平均を基準とした異常検知
        overall_mean = monthly_hours.mean()
        threshold = overall_mean * self.thresholds["excessive_hours_multiplier"]
        
        for (staff, month), hours in monthly_hours.items():
            if hours > threshold:
                severity = self._calculate_severity(hours, threshold, overall_mean * 2)
                anomalies.append(AnomalyResult(
                    anomaly_type="過度な労働時間",
                    severity=severity,
                    staff=staff,
                    description=f"{month}の労働時間が異常に多い ({hours:.1f}時間)",
                    value=hours,
                    expected_range=(0, threshold),
                    date_range=(str(month.start_time.date()), str(month.end_time.date()))
                ))
        
        return anomalies
    
    def _detect_continuous_work_violations(self, work_df: pd.DataFrame) -> List[AnomalyResult]:
        """連続勤務日数違反の検知（O(n log n)）"""
        anomalies = []
        
        for staff, group in work_df.groupby('staff'):
            # 日付でソートして連続勤務を検出
            work_dates = group['ds'].dt.date.unique()
            work_dates.sort()
            
            if len(work_dates) < 2:
                continue
            
            continuous_days = 1
            start_date = work_dates[0]
            
            for i in range(1, len(work_dates)):
                if (work_dates[i] - work_dates[i-1]).days == 1:
                    continuous_days += 1
                else:
                    # 連続勤務期間の終了をチェック
                    if continuous_days > self.thresholds["continuous_work_days"]:
                        severity = self._calculate_severity(
                            continuous_days, 
                            self.thresholds["continuous_work_days"], 
                            self.thresholds["continuous_work_days"] + 5
                        )
                        anomalies.append(AnomalyResult(
                            anomaly_type="連続勤務違反",
                            severity=severity,
                            staff=staff,
                            description=f"{continuous_days}日間の連続勤務を検出",
                            value=continuous_days,
                            expected_range=(0, self.thresholds["continuous_work_days"]),
                            date_range=(str(start_date), str(work_dates[i-1]))
                        ))
                    
                    continuous_days = 1
                    start_date = work_dates[i]
            
            # 最後の連続勤務期間もチェック
            if continuous_days > self.thresholds["continuous_work_days"]:
                severity = self._calculate_severity(
                    continuous_days, 
                    self.thresholds["continuous_work_days"], 
                    self.thresholds["continuous_work_days"] + 5
                )
                anomalies.append(AnomalyResult(
                    anomaly_type="連続勤務違反",
                    severity=severity,
                    staff=staff,
                    description=f"{continuous_days}日間の連続勤務を検出",
                    value=continuous_days,
                    expected_range=(0, self.thresholds["continuous_work_days"]),
                    date_range=(str(start_date), str(work_dates[-1]))
                ))
        
        return anomalies
    
    def _detect_night_shift_anomalies(self, work_df: pd.DataFrame) -> List[AnomalyResult]:
        """夜勤頻度異常の検知（O(n)）"""
        anomalies = []
        
        for staff, group in work_df.groupby('staff'):
            total_shifts = len(group)
            night_shifts = group[group['code'].str.contains('夜', na=False)].shape[0]
            night_shift_ratio = night_shifts / total_shifts if total_shifts > 0 else 0
            
            if night_shift_ratio > self.thresholds["night_shift_frequency"]:
                severity = self._calculate_severity(
                    night_shift_ratio, 
                    self.thresholds["night_shift_frequency"], 
                    0.6
                )
                anomalies.append(AnomalyResult(
                    anomaly_type="夜勤頻度過多",
                    severity=severity,
                    staff=staff,
                    description=f"夜勤頻度が高すぎます ({night_shift_ratio:.1%})",
                    value=night_shift_ratio,
                    expected_range=(0, self.thresholds["night_shift_frequency"])
                ))
        
        return anomalies
    
    def _detect_interval_violations(self, work_df: pd.DataFrame) -> List[AnomalyResult]:
        """勤務間インターバル違反の検知（軽量版）（O(n log n)）"""
        anomalies = []
        
        for staff, group in work_df.groupby('staff'):
            # 日付でソートして勤務間インターバルを計算
            sorted_group = group.sort_values('ds')
            
            violations = 0
            total_intervals = 0
            
            for i in range(1, len(sorted_group)):
                prev_end = sorted_group.iloc[i-1]['ds']
                curr_start = sorted_group.iloc[i]['ds']
                
                # 簡易的な間隔計算（実際の終了時間は推定）
                interval_hours = (curr_start - prev_end).total_seconds() / 3600
                
                if 0 < interval_hours < self.thresholds["interval_violation_hours"]:
                    violations += 1
                
                total_intervals += 1
            
            if violations > 0 and total_intervals > 0:
                violation_rate = violations / total_intervals
                
                if violation_rate > 0.1:  # 10%以上の違反率
                    severity = self._calculate_severity(violation_rate, 0.1, 0.3)
                    anomalies.append(AnomalyResult(
                        anomaly_type="勤務間インターバル違反",
                        severity=severity,
                        staff=staff,
                        description=f"勤務間インターバル違反が多発 ({violations}/{total_intervals})",
                        value=violation_rate,
                        expected_range=(0, 0.1)
                    ))
        
        return anomalies
    
    def _calculate_severity(self, value: float, warning_threshold: float, critical_threshold: float) -> str:
        """重要度の計算"""
        if value >= critical_threshold:
            return "緊急"
        elif value >= warning_threshold * 1.5:
            return "高"
        elif value >= warning_threshold * 1.2:
            return "中"
        else:
            return "低"
    
    def _get_severity_priority(self, severity: str) -> int:
        """重要度の優先順位（ソート用）"""
        priority_map = {"緊急": 0, "高": 1, "中": 2, "低": 3}
        return priority_map.get(severity, 4)
    
    def generate_anomaly_summary(self, anomalies: List[AnomalyResult]) -> Dict[str, Any]:
        """異常検知結果のサマリー生成"""
        if not anomalies:
            return {"message": "異常は検知されませんでした", "total_anomalies": 0}
        
        summary = {
            "detection_timestamp": datetime.now().isoformat(),
            "total_anomalies": len(anomalies),
            "by_severity": defaultdict(int),
            "by_type": defaultdict(int),
            "by_staff": defaultdict(int),
            "top_issues": []
        }
        
        for anomaly in anomalies:
            summary["by_severity"][anomaly.severity] += 1
            summary["by_type"][anomaly.anomaly_type] += 1
            summary["by_staff"][anomaly.staff] += 1
        
        # 上位問題の抽出（緊急・高重要度のみ）
        critical_anomalies = [a for a in anomalies if a.severity in ["緊急", "高"]]
        summary["top_issues"] = [
            {
                "type": a.anomaly_type,
                "staff": a.staff,
                "description": a.description,
                "severity": a.severity
            }
            for a in critical_anomalies[:5]  # 上位5件
        ]
        
        return dict(summary)

def test_lightweight_anomaly_detector():
    """軽量異常検知システムのテスト"""
    print("🧪 軽量異常検知システムテスト開始")
    
    # テスト用のサンプルデータ作成
    sample_data = {
        'ds': pd.date_range('2025-01-01 08:00', periods=50, freq='8H'),
        'staff': (['田中'] * 25 + ['佐藤'] * 25),
        'role': ['介護士'] * 50,
        'code': (['日勤'] * 20 + ['夜勤'] * 15 + ['日勤'] * 10 + ['夜勤'] * 5),
        'holiday_type': [''] * 50,
        'parsed_slots_count': [1] * 50
    }
    
    sample_df = pd.DataFrame(sample_data)
    
    # 異常検知テスト
    detector = LightweightAnomalyDetector(sensitivity="medium")
    anomalies = detector.detect_anomalies(sample_df)
    
    print(f"検知された異常数: {len(anomalies)}")
    for anomaly in anomalies:
        print(f"  - {anomaly.severity}: {anomaly.anomaly_type} ({anomaly.staff})")
        print(f"    {anomaly.description}")
    
    # サマリー生成
    summary = detector.generate_anomaly_summary(anomalies)
    print(f"\nサマリー: {summary['total_anomalies']}件の異常")
    
    print("✅ 軽量異常検知システムテスト完了")
    return anomalies, summary

if __name__ == "__main__":
    test_lightweight_anomaly_detector()